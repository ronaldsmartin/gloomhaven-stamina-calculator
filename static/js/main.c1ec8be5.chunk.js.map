{"version":3,"sources":["components/Summary.tsx","components/ShortRestRow.tsx","components/TurnRecordRow.tsx","components/TurnList.tsx","components/Calculator.tsx","components/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Summary","props","className","currentRound","cardsInPlay","turnsRemaining","ShortRestRow","classNameFor","turnTiming","TurnRecordRow","scope","roundNumber","icons","map","icon","src","imageName","alt","description","timing","TurnTiming","Previous","Future","rowsFromTurn","turn","turnRow","key","shortRestFollows","push","TurnList","previousTurns","flatMap","projectedTurns","StandardTurn","mockPreviousTurns","mockProjectedTurns","Calculator","Footer","version","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kVAyBeA,EAjBC,SAACC,GACb,OACI,yBAAKC,UAAU,WACX,uCACA,4BACI,qCACA,4BAAKD,EAAME,cAEX,0CACA,4BAAKF,EAAMG,aAEX,0CACA,4BAAKH,EAAMI,mBCFZC,EAPM,SAACL,GAAD,OACrB,wBAAIC,UAAS,uBAAkBK,EAAaN,EAAMO,cAC9C,6BACA,6BACA,wBAAIN,UAAU,wCAAd,iBC0BWO,EAlBO,SAACR,GACnB,OACI,wBAAIC,UAAS,wBAAmBK,EAAaN,EAAMO,cAC/C,wBAAIN,UAAU,kBAAkBQ,MAAM,OAAOT,EAAMU,aACnD,4BACCV,EAAMW,OACH,yBAAKV,UAAU,aACdD,EAAMW,MAAMC,KAAI,SAAAC,GAAI,OACjB,yBAAKC,IAAKD,EAAKE,UAAWC,IAAKH,EAAKI,mBAK5C,wBAAIhB,UAAU,mBAAmBD,EAAMiB,eC/B5C,SAASX,EAAaY,GACzB,OAAQA,GACJ,KAAKC,EAAWC,SAAY,MAAO,eACnC,KAAKD,EAAWE,OAAY,MAAO,cAS3C,SAASC,EAAaC,EAAYL,GAC9B,IAAIM,EAAU,CACV,kBAAC,EAAD,CACYC,IAAG,eAAUF,EAAKb,aAClBA,YAAaa,EAAKb,YAClBO,YAAaM,EAAKN,YAClBV,WAAYW,KAS5B,OAPIK,EAAKG,kBACLF,EAAQG,KACJ,kBAAC,EAAD,CACQF,IAAG,eAAUF,EAAKb,aAClBH,WAAYW,KAGrBM,EAGX,ICrBYL,ED8BGS,EATE,SAAC5B,GAAD,OAA0B,2BAAOC,UAAU,YACxD,0CACA,+BACMD,EAAM6B,cAAcC,SAAQ,SAAAP,GAAI,OAAID,EAAaC,EAAMJ,EAAWC,cAExE,+BACMpB,EAAM+B,eAAenB,KAAI,SAAAW,GAAI,OAAID,EAAaC,EAAMJ,EAAWE,cC/B5DW,EAET,WAAqBtB,EAA8BgB,GAA4B,yBAA1DhB,cAAyD,KAA3BgB,mBAA2B,KADrET,YAAsB,kB,SAGvBE,O,uBAAAA,I,oBAAAA,M,KAEZ,IAAMc,EAA4B,CAC9B,IAAID,EAAa,GAAG,GACpB,IAAIA,EAAa,GAAG,GACpB,IAAIA,EAAa,GAAG,GACpB,IAAIA,EAAa,GAAG,IAElBE,EAA6B,CAC/B,IAAIF,EAAa,GAAG,GACpB,IAAIA,EAAa,GAAG,GACpB,IAAIA,EAAa,GAAG,GACpB,IAAIA,EAAa,GAAG,IAYTG,EATI,WACf,OACI,6BACI,kBAAC,EAAD,CAASjC,aAAc,EAAGC,YAAa,GAAIC,eAAgB,IAC3D,kBAAC,EAAD,CAAUyB,cAAeI,EAAmBF,eAAgBG,M,OCpBzDE,EAVA,WACX,OACI,gCACI,4DACA,sDACA,2BAAG,oCAAUC,KAAb,IAA+B,uBAAGC,KAAK,kEAAR,qBAC/B,2BAAG,uBAAGA,KAAK,yDAAR,cAAH,sCAAoH,uBAAGA,KAAK,yCAAR,qBAApH,KAA2L,uBAAGA,KAAK,iEAAR,SAA3L,uCCOGC,EAXO,WACpB,OACE,yBAAKtC,UAAU,OACb,8BACE,kBAAC,EAAD,OAEF,kBAAC,EAAD,QCCcuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c1ec8be5.chunk.js","sourcesContent":["import React from 'react';\n\nexport interface SummaryProps { \n    currentRound: number;\n    cardsInPlay: number;\n    turnsRemaining: number;\n}\n\nconst Summary = (props: SummaryProps) => {\n    return (\n        <div className=\"Summary\">\n            <h2>Summary</h2>\n            <dl>\n                <dt>Round</dt>\n                <dd>{props.currentRound}</dd>\n\n                <dt>Cards Left</dt>\n                <dd>{props.cardsInPlay}</dd>\n\n                <dt>Turns Left</dt>\n                <dd>{props.turnsRemaining}</dd>\n            </dl>\n        </div>\n    );\n};\nexport default Summary;","import React from 'react';\nimport { TurnTiming } from './Calculator';\nimport { classNameFor } from './TurnList';\n\nexport interface ShortRestRowProps {\n    turnTiming: TurnTiming;\n}\n\n/**\n * Table row for a \"short rest\" taken after a turn.\n */\nconst ShortRestRow = (props: ShortRestRowProps) => \n<tr className={`ShortRestRow ${classNameFor(props.turnTiming)}`}>\n    <td>{ /* Round number column is the same as the previous row. */ }</td>\n    <td>{ /* No icon */ }</td>\n    <td className=\"TurnDescription ShortRestDescription\">Short rest!</td>\n</tr>;\n\nexport default ShortRestRow;","import React from 'react';\nimport { TurnTiming } from './Calculator';\nimport { classNameFor } from './TurnList';\n\n/**\n * Encapsulates the data need to display an image for a turn.\n */\nexport interface TurnIcon {\n    imageName: string;\n    description: string;\n}\n\nexport interface TurnRecordRowProps {\n    roundNumber: number;\n    icons?: TurnIcon[];\n    description: string;\n    turnTiming: TurnTiming;\n}\n\n/**\n * A row in the list of turns taken or projected for this scenario.\n * @param props React props for this component. See: `TurnRecordProps`.\n */\nconst TurnRecordRow = (props: TurnRecordRowProps) => {\n    return (\n        <tr className={`TurnRecordRow ${classNameFor(props.turnTiming)}`}>\n            <th className=\"TurnRoundNumber\" scope=\"row\">{props.roundNumber}</th>\n            <td>\n            {props.icons &&\n                <div className=\"TurnIcons\">\n                {props.icons.map(icon => \n                    <img src={icon.imageName} alt={icon.description} />\n                )}\n                </div>\n            }\n            </td>\n            <td className=\"TurnDescription\">{props.description}</td>\n        </tr>\n    );\n};\n\nexport default TurnRecordRow;","import React from 'react';\nimport { Turn, TurnTiming } from './Calculator';\nimport ShortRestRow from './ShortRestRow';\nimport TurnRecordRow from './TurnRecordRow';\n\nexport function classNameFor(timing: TurnTiming): string {\n    switch (timing) {\n        case TurnTiming.Previous:   return 'PreviousTurn';\n        case TurnTiming.Future:     return 'FutureTurn';\n    }\n}\n\nexport interface TurnListProps {\n    previousTurns: Turn[];\n    projectedTurns: Turn[];\n}\n\nfunction rowsFromTurn(turn: Turn, timing: TurnTiming) {\n    let turnRow = [\n        <TurnRecordRow\n                    key={`turn-${turn.roundNumber}`}\n                    roundNumber={turn.roundNumber}\n                    description={turn.description}\n                    turnTiming={timing} />\n    ];\n    if (turn.shortRestFollows) {\n        turnRow.push(\n            <ShortRestRow \n                    key={`rest-${turn.roundNumber}`}\n                    turnTiming={timing}/>\n        )\n    }\n    return turnRow\n}\n\nconst TurnList = (props: TurnListProps) => <table className=\"TurnList\">\n    <caption>Turns</caption>\n    <tbody>\n        { props.previousTurns.flatMap(turn => rowsFromTurn(turn, TurnTiming.Previous)) }\n    </tbody>\n    <tbody>\n        { props.projectedTurns.map(turn => rowsFromTurn(turn, TurnTiming.Future)) }\n    </tbody>\n</table>;\nexport default TurnList;","import React from 'react';\nimport Summary from './Summary';\nimport TurnList from './TurnList';\n\nexport interface Turn {\n    roundNumber: number;\n    description: string;\n    shortRestFollows: boolean;\n}\n\nexport class StandardTurn implements Turn {\n    readonly description: string = \"Standard turn\";\n    constructor(readonly roundNumber: number, readonly shortRestFollows: boolean) {}\n}\nexport enum TurnTiming { Previous, Future }\n\nconst mockPreviousTurns: Turn[] = [\n    new StandardTurn(1, false),\n    new StandardTurn(2, false),\n    new StandardTurn(3, false),\n    new StandardTurn(4, true),\n];\nconst mockProjectedTurns: Turn[] = [\n    new StandardTurn(5, false),\n    new StandardTurn(6, false),\n    new StandardTurn(7, true),\n    new StandardTurn(8, false),\n];\n\nconst Calculator = () => {\n    return (\n        <div>\n            <Summary currentRound={1} cardsInPlay={12} turnsRemaining={6} />\n            <TurnList previousTurns={mockPreviousTurns} projectedTurns={mockProjectedTurns} />\n        </div>\n    );\n}\n\nexport default Calculator;","import React from 'react';\nimport { version } from '../../package.json';\n\nconst Footer = () => {\n    return (\n        <footer>\n            <p>Gloomhaven Stamina Calculator</p>\n            <p>Â© 2019 Ronald Martin</p>\n            <p><strong>v{version}</strong> <a href=\"https://github.com/ronaldsmartin/gloomhaven-stamina-calculator\">Source on GitHub</a></p>\n            <p><a href=\"https://boardgamegeek.com/boardgame/174430/gloomhaven\">Gloomhaven</a> and all related content belong to <a href=\"http://www.cephalofair.com/gloomhaven\">Cephalofair Games</a>, <a href=\"https://boardgamegeek.com/boardgame/174430/gloomhaven/credits\">et al</a>. I do not profit from this work.</p>\n        </footer>\n    )\n}\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Calculator from './components/Calculator';\nimport Footer from './components/Footer';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <main>\n        <Calculator />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}