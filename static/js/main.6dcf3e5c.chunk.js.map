{"version":3,"sources":["redux/types/characters.ts","components/Footer.tsx","components/NavigationBar.tsx","redux/types/characterActionTypes.ts","containers/NavigationBarContainer.ts","redux/types/scenarioActionTypes.ts","redux/actions/characters.ts","components/ShortRestRow.tsx","components/RoundList.tsx","components/TurnRecordRow.tsx","components/Summary.tsx","components/Calculator.tsx","redux/actions/calculator.ts","redux/reducers/character.ts","redux/reducers/calculator.ts","containers/StatefulCalculator.ts","redux/reducers/app.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["CharacterId","Footer","version","href","NavigationBar","props","value","currentCharacterId","onChange","event","handleChange","target","allCharacters","map","character","id","name","makeCharacter","handSize","hasRevivingEther","toString","CharacterActionKeys","ALL_CHARACTERS","Brute","Cragheart","Mindthief","Scoundrel","Spellweaver","Tinker","Sawbones","ScenarioActionKeys","NavigationBarContainer","connect","state","current","dispatch","characterId","newCharacterId","type","CHANGE_CHARACTER","newCharacter","find","fail","TurnTiming","ShortRestRow","className","classNameFor","turnTiming","TurnRecordRow","scope","roundNumber","icons","icon","src","imageName","alt","description","timing","Previous","Future","rowsForRound","round","action","index","actionNumber","isFirstActionInRound","SHORT_REST","key","undefined","rowForAction","PLAY_STANDARD","PLAY_LOSS_CARD","LONG_REST","ESCAPE_DAMAGE_HAND","ESCAPE_DAMAGE_DISCARD","USE_STAMINA_POTION","REVIVING_ETHER","END_TURN","OTHER_ACTION","RoundList","completedRounds","flatMap","projectedRounds","length","Summary","currentRound","cardsInPlay","turnsRemaining","Calculator","currentHandCount","playStandardCard","initialCharacterState","c","initialCharacter","initialState","startingHandCount","currentDiscardCount","currentLostCount","calculateProjectedRounds","maxNextRoundCardCount","concat","thisRound","push","calculator","Math","max","min","StatefulCalculator","scenarioState","rootReducer","combineReducers","store","createStore","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6dcf3e5c.chunk.js","sourcesContent":["export enum CharacterId {\n    Brute = \"Brute\",\n    Cragheart = \"Cragheart\",\n    Mindthief = \"Mindthief\",\n    Scoundrel = \"Scoundrel\",\n    Spellweaver = \"Spellweaver\",\n    Tinker = \"Tinker\",\n    Sawbones = \"Saw\"\n}\n\nexport interface Character {\n    id: CharacterId;\n    name: string;\n    handSize: number;\n    hasRevivingEther: boolean;\n}\n\nfunction makeCharacter(\n    id: CharacterId, \n    handSize: number, \n    hasRevivingEther: boolean = false\n): Character {\n    return {\n        id: id,\n        name: id.toString(),\n        handSize: handSize,\n        hasRevivingEther: hasRevivingEther,\n    }\n}\n\nexport const ALL_CHARACTERS = [\n    makeCharacter(CharacterId.Brute, 10),\n    makeCharacter(CharacterId.Cragheart, 11),\n    makeCharacter(CharacterId.Mindthief, 10),\n    makeCharacter(CharacterId.Scoundrel, 9),\n    makeCharacter(CharacterId.Spellweaver, 8, true),\n    makeCharacter(CharacterId.Tinker, 12),\n    makeCharacter(CharacterId.Sawbones, 10),\n]","import React from 'react';\nimport { version } from '../../package.json';\n\nconst Footer = () => {\n    return (\n        <footer>\n            <p>Gloomhaven Stamina Calculator</p>\n            <p>Â© 2019 Ronald Martin</p>\n            <p><strong>v{version}</strong> <a href=\"https://github.com/ronaldsmartin/gloomhaven-stamina-calculator\">Source on GitHub</a></p>\n            <p><a href=\"https://boardgamegeek.com/boardgame/174430/gloomhaven\">Gloomhaven</a> and all related content belong to <a href=\"http://www.cephalofair.com/gloomhaven\">Cephalofair Games</a>, <a href=\"https://boardgamegeek.com/boardgame/174430/gloomhaven/credits\">et al</a>. I do not profit from this work.</p>\n        </footer>\n    )\n}\nexport default Footer;","import React from 'react';\nimport { Character, CharacterId } from '../redux/types/characters';\n\nexport interface NavigationBarProps {\n    currentCharacterId: CharacterId;\n    allCharacters: Character[];\n    handleChange: (characterId: CharacterId) => void;\n}\n\nconst NavigationBar = (props: NavigationBarProps) =>\n    <nav>\n        <label>\n            Character class:\n        <select\n                value={props.currentCharacterId}\n                onChange={(event) => props.handleChange(event.target.value as CharacterId)}>\n                {\n                    props.allCharacters.map(character => {\n                        return <option value={character.id}>{character.name}</option>\n                    })\n                }\n            </select>\n        </label>\n    </nav>\n\nexport default NavigationBar;","import { Character } from \"./characters\";\n\nexport enum CharacterActionKeys {\n    CHANGE_CHARACTER = \"CHANGE_CHARACTER\",\n}\n\nexport interface ChangeCharacterAction {\n    type: CharacterActionKeys.CHANGE_CHARACTER;\n    newCharacter: Character;\n}\n\nexport type CharacterAction =\n    | ChangeCharacterAction","import { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport NavigationBar, { NavigationBarProps } from '../components/NavigationBar';\nimport { AppState } from '../redux/reducers/app';\nimport { ALL_CHARACTERS, CharacterId } from '../redux/types/characters';\nimport { changeCharacter } from '../redux/actions/characters';\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        currentCharacterId: state.character.current.id,\n        allCharacters: ALL_CHARACTERS,\n    }\n}\nconst matchDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        handleChange: (characterId: CharacterId) => dispatch(changeCharacter(characterId))\n    }\n}\n\nconst NavigationBarContainer = connect(\n    mapStateToProps,\n    matchDispatchToProps,\n)(NavigationBar)\n\nexport default NavigationBarContainer;","export enum ScenarioActionKeys {\n    PLAY_STANDARD = \"PLAY_STANDARD\",\n    PLAY_LOSS_CARD = \"PLAY_LOSS_CARD\",\n    SHORT_REST = \"SHORT_REST\",\n    LONG_REST = \"LONG_REST\",\n    ESCAPE_DAMAGE_HAND = \"ESCAPE_DAMAGE_HAND\",\n    ESCAPE_DAMAGE_DISCARD = \"ESCAPE_DAMAGE_DISCARD\",\n    USE_STAMINA_POTION = \"USE_STAMINA_POTION\",\n    REVIVING_ETHER = \"REVIVING_ETHER\",\n    END_TURN = \"END_TURN\",\n    OTHER_ACTION = \"OTHER_ACTION\"\n}\n\nexport interface PlayStandardAction {\n    type: ScenarioActionKeys.PLAY_STANDARD;\n}\n\nexport interface PlayLossCardAction {\n    type: ScenarioActionKeys.PLAY_LOSS_CARD;\n}\n\nexport interface ShortRestAction {\n    type: ScenarioActionKeys.SHORT_REST;\n}\n\nexport interface LongRestAction {\n    type: ScenarioActionKeys.LONG_REST;\n}\n\nexport interface EscapeDamageHandAction {\n    type: ScenarioActionKeys.ESCAPE_DAMAGE_HAND;\n}\n\nexport interface EscapeDamageDiscardAction {\n    type: ScenarioActionKeys.ESCAPE_DAMAGE_DISCARD;\n}\n\nexport interface UseStaminaPotionAction {\n    type: ScenarioActionKeys.USE_STAMINA_POTION;\n}\n\nexport interface RevivingEtherAction {\n    type: ScenarioActionKeys.REVIVING_ETHER;\n}\n\nexport interface EndTurnAction {\n    type: ScenarioActionKeys.END_TURN;\n}\n\nexport interface OtherScenarioAction {\n    type: ScenarioActionKeys.OTHER_ACTION;\n}\n\nexport type ScenarioAction =\n    | PlayStandardAction\n    | PlayLossCardAction\n    | ShortRestAction\n    | LongRestAction\n    | EscapeDamageHandAction\n    | EscapeDamageDiscardAction\n    | UseStaminaPotionAction\n    | RevivingEtherAction\n    | EndTurnAction\n    | OtherScenarioAction","import { CharacterId, ALL_CHARACTERS } from \"../types/characters\";\nimport { ChangeCharacterAction, CharacterActionKeys } from \"../types/characterActionTypes\";\nimport { fail } from \"assert\";\n\nexport function changeCharacter(newCharacterId: CharacterId): ChangeCharacterAction {\n    return {\n        type: CharacterActionKeys.CHANGE_CHARACTER,\n        newCharacter: ALL_CHARACTERS.find(\n            character => character.id === newCharacterId\n        ) || fail(`Unknown character picked: ${newCharacterId}`)\n    }\n}","import React from 'react';\nimport { classNameFor, TurnTiming } from './RoundList';\n\nexport interface ShortRestRowProps {\n    turnTiming: TurnTiming;\n}\n\n/**\n * Table row for a \"short rest\" taken after a turn.\n */\nconst ShortRestRow = (props: ShortRestRowProps) => \n<tr className={`ShortRestRow ${classNameFor(props.turnTiming)}`}>\n    <td>{ /* Round number column is the same as the previous row. */ }</td>\n    <td>{ /* No icon */ }</td>\n    <td className=\"TurnDescription ShortRestDescription\">Short rest!</td>\n</tr>;\n\nexport default ShortRestRow;","import React from 'react';\nimport { ScenarioAction, ScenarioActionKeys } from '../redux/types/scenarioActionTypes';\nimport { Round } from '../redux/types/scenarioState';\nimport ShortRestRow from './ShortRestRow';\nimport TurnRecordRow from './TurnRecordRow';\n\n// - TurnTiming type\n\nexport enum TurnTiming { Previous, Future }\n\nexport function classNameFor(timing: TurnTiming): string {\n    switch (timing) {\n        case TurnTiming.Previous:   return 'PreviousTurn';\n        case TurnTiming.Future:     return 'FutureTurn';\n    }\n}\n\n// - Props\n\nexport interface RoundListProps {\n    completedRounds: Round[];\n    projectedRounds: Round[];\n}\n\nfunction rowsForRound(round: Round, roundNumber: number, timing: TurnTiming) {\n    return round.map((action, index) => rowForAction(action, index, roundNumber, timing, index === 0));\n}\n\nfunction rowForAction(\n    action: ScenarioAction,\n    actionNumber: number,\n    roundNumber: number, \n    timing: TurnTiming,\n    isFirstActionInRound: boolean,\n) {\n    if (action.type === ScenarioActionKeys.SHORT_REST) {\n        return <ShortRestRow\n                    key={`short-rest-${roundNumber}`}\n                    turnTiming={timing} />\n    }\n    return <TurnRecordRow\n                key={`round-${roundNumber}-action-${actionNumber}-${action.type}`}\n                roundNumber={isFirstActionInRound ? roundNumber : undefined}\n                description={description(action)}\n                turnTiming={timing} />\n}\n\nfunction description(action: ScenarioAction) {\n    switch (action.type) {\n        case ScenarioActionKeys.PLAY_STANDARD:\n            return \"Play a standard action card\";\n        case ScenarioActionKeys.PLAY_LOSS_CARD:\n            return \"Play a loss card\";\n        case ScenarioActionKeys.SHORT_REST:\n            return \"Short rest\";\n        case ScenarioActionKeys.LONG_REST:\n            return \"Long rest\";\n        case ScenarioActionKeys.ESCAPE_DAMAGE_HAND:\n            return \"Lose one hand card to escape damage\";\n        case ScenarioActionKeys.ESCAPE_DAMAGE_DISCARD:\n            return \"Lose two discard cards to escape damage\";\n        case ScenarioActionKeys.USE_STAMINA_POTION:\n            return \"Use stamina potion\";\n        case ScenarioActionKeys.REVIVING_ETHER:\n            return \"Activate Reviving Ether\";\n        case ScenarioActionKeys.END_TURN:\n            return \"End the turn.\";\n        case ScenarioActionKeys.OTHER_ACTION:\n            return \"\";\n    }\n}\n\n// - RoundList\n\nconst RoundList = (props: RoundListProps) => <table className=\"TurnList\">\n    <caption>Turns</caption>\n    <thead>\n        <tr>\n            <th scope=\"col\">Round Number</th>\n            <th scope=\"col\"></th>\n            <th scope=\"col\">Actions taken</th>\n        </tr>\n    </thead>\n    <tbody>\n        {\n            props.completedRounds.flatMap((round, roundNumber) => \n                rowsForRound(round, roundNumber + 1, TurnTiming.Previous)\n            )\n        }\n    </tbody>\n    <tbody>\n        {\n            props.projectedRounds.flatMap((round, roundNumber) =>\n                rowsForRound(round, roundNumber + props.completedRounds.length + 1, TurnTiming.Previous)\n            )\n        }\n    </tbody>\n</table>;\nexport default RoundList;","import React from 'react';\nimport { classNameFor, TurnTiming } from './RoundList';\n\n/**\n * Encapsulates the data need to display an image for a turn.\n */\nexport interface TurnIcon {\n    imageName: string;\n    description: string;\n}\n\nexport interface TurnRecordRowProps {\n    roundNumber?: number;\n    icons?: TurnIcon[];\n    description: string;\n    turnTiming: TurnTiming;\n}\n\n/**\n * A row in the list of turns taken or projected for this scenario.\n * @param props React props for this component. See: `TurnRecordProps`.\n */\nconst TurnRecordRow = (props: TurnRecordRowProps) => {\n    return (\n        <tr className={`TurnRecordRow ${classNameFor(props.turnTiming)}`}>\n            <th className=\"TurnRoundNumber\" scope=\"row\">{props.roundNumber}</th>\n            <td>\n            {props.icons &&\n                <div className=\"TurnIcons\">\n                {props.icons.map(icon => \n                    <img src={icon.imageName} alt={icon.description} />\n                )}\n                </div>\n            }\n            </td>\n            <td className=\"TurnDescription\">{props.description}</td>\n        </tr>\n    );\n};\n\nexport default TurnRecordRow;","import React from 'react';\n\nexport interface SummaryProps { \n    currentRound: number;\n    cardsInPlay: number;\n    turnsRemaining: number;\n}\n\nconst Summary = (props: SummaryProps) => {\n    return (\n        <div className=\"Summary\">\n            <h2>Summary</h2>\n            <dl>\n                <dt>Round</dt>\n                <dd>{props.currentRound}</dd>\n\n                <dt>Cards Left</dt>\n                <dd>{props.cardsInPlay}</dd>\n\n                <dt>Turns Left</dt>\n                <dd>{props.turnsRemaining}</dd>\n            </dl>\n        </div>\n    );\n};\nexport default Summary;","import React from 'react';\nimport { ScenarioState } from '../redux/types/scenarioState';\nimport RoundList from './RoundList';\nimport Summary from './Summary';\n\nexport type CalculatorProps = ScenarioState;\n\nconst Calculator = (props: CalculatorProps) => {\n    return (\n        <div>\n            <Summary \n                currentRound={props.currentRound} \n                cardsInPlay={props.currentHandCount} \n                turnsRemaining={props.projectedRounds.length} />\n            <RoundList \n                completedRounds={props.completedRounds} \n                projectedRounds={props.projectedRounds} />\n        </div>\n    );\n}\n\nexport default Calculator;","import { EndTurnAction, EscapeDamageDiscardAction, EscapeDamageHandAction, LongRestAction, PlayLossCardAction, PlayStandardAction, RevivingEtherAction, ScenarioActionKeys, ShortRestAction, UseStaminaPotionAction } from '../types/scenarioActionTypes';\n\nexport function playStandardCard(): PlayStandardAction {\n    return {\n        type: ScenarioActionKeys.PLAY_STANDARD,\n    }\n}\n\nexport function playLossCard(): PlayLossCardAction {\n    return {\n        type: ScenarioActionKeys.PLAY_LOSS_CARD,\n    }\n}\n\nexport function shortRest(): ShortRestAction {\n    return {\n        type: ScenarioActionKeys.SHORT_REST,\n    }\n}\n\nexport function longRest(): LongRestAction {\n    return {\n        type: ScenarioActionKeys.LONG_REST,\n    }\n}\n\nexport function escapeDamageByLossFromHand(): EscapeDamageHandAction {\n    return {\n        type: ScenarioActionKeys.ESCAPE_DAMAGE_HAND,\n    }\n}\n\nexport function escapeDamageByLossFromDiscard(): EscapeDamageDiscardAction {\n    return {\n        type: ScenarioActionKeys.ESCAPE_DAMAGE_DISCARD,\n    }\n}\n\nexport function useStaminaPotion(): UseStaminaPotionAction {\n    return {\n        type: ScenarioActionKeys.USE_STAMINA_POTION,\n    }\n}\n\nexport function playRevivingEther(): RevivingEtherAction {\n    return {\n        type: ScenarioActionKeys.REVIVING_ETHER,\n    }\n}\n\nexport function endTurn(): EndTurnAction {\n    return {\n        type: ScenarioActionKeys.END_TURN,\n    }\n}","import { CharacterState } from \"../types/characterState\";\nimport { CharacterAction, CharacterActionKeys } from \"../types/characterActionTypes\";\nimport { ALL_CHARACTERS, CharacterId } from \"../types/characters\";\n\nexport const initialCharacterState = {\n    current: ALL_CHARACTERS.find(c => \n        c.id === CharacterId.Brute\n    ) || fail(\"Missing Brute character definition\"),\n}\n\nconst character = (\n    state: CharacterState = initialCharacterState, \n    action: CharacterAction\n): CharacterState => {\n    switch (action.type) {\n        case CharacterActionKeys.CHANGE_CHARACTER:\n            return {\n                ...state,\n                current: action.newCharacter,\n            }\n        default:\n            return state;\n    }\n    \n}\n\nexport default character;","import { playLossCard, playRevivingEther, playStandardCard, shortRest } from \"../actions/calculator\";\nimport { ScenarioAction, ScenarioActionKeys } from \"../types/scenarioActionTypes\";\nimport { Round, ScenarioState } from \"../types/scenarioState\";\nimport { CharacterAction, CharacterActionKeys } from \"../types/characterActionTypes\";\nimport { initialCharacterState } from \"./character\";\n\nconst initialCharacter = initialCharacterState.current;\n\nconst initialState: ScenarioState = {\n    startingHandCount: initialCharacter.handSize,\n    hasRevivingEther: initialCharacter.hasRevivingEther,\n\n    currentRound: 1,\n    currentHandCount: initialCharacter.handSize,\n    currentDiscardCount: 0,\n    currentLostCount: 0,\n\n    completedRounds: [],\n    projectedRounds: [],\n}\n\nexport function calculateProjectedRounds(\n    startingHandCount: number,\n    currentHandCount: number,\n    currentDiscardCount: number,\n    currentLostCount: number,\n    hasRevivingEther: boolean\n): Round[] {\n    // Base case\n    if (currentHandCount < 2) {\n        // The player is exhausted this turn.\n        return [];\n    }\n\n    // The maximum number of cards in play next round if we rest (without Reviving Ether):\n    const maxNextRoundCardCount = currentHandCount + currentDiscardCount - 1;\n\n    if (hasRevivingEther && maxNextRoundCardCount < 2) {\n        // Spellweaver needs to use Reviving Ether. \n        // The optimal move will burn a Loss card before applying Reviving Ether.\n        const thisRound: Round = [\n            playLossCard(),\n            playRevivingEther(),\n        ] \n        return [thisRound].concat(\n            calculateProjectedRounds(startingHandCount, startingHandCount - 1, 0, 0, false)\n        )\n    }\n\n    // Assume a standard move (optimal to avoid Exhaustion).\n    let thisRound: Round = [\n        playStandardCard(),\n        playStandardCard(),\n    ];\n\n    if (currentHandCount < 4 && maxNextRoundCardCount >= 2) {\n        // The character should rest to avoid exhaustion after this turn.\n        thisRound.push(shortRest())\n\n        return [thisRound].concat(\n            calculateProjectedRounds(\n                startingHandCount, \n                maxNextRoundCardCount, \n                0, \n                currentLostCount + 1, \n                hasRevivingEther\n            )\n        );\n    }\n\n    return [thisRound].concat(\n        calculateProjectedRounds(\n            startingHandCount,\n            currentHandCount - 2,\n            currentDiscardCount + 2,\n            currentLostCount,\n            hasRevivingEther\n        )\n    );\n}\n\nconst calculator = (\n    state: ScenarioState = initialState, \n    action: ScenarioAction | CharacterAction\n): ScenarioState => {\n    switch (action.type) {\n        case ScenarioActionKeys.PLAY_STANDARD:\n            return {\n                ...state,\n                currentHandCount: state.currentHandCount - 1,\n                currentDiscardCount: state.currentDiscardCount + 1,\n            }\n        case ScenarioActionKeys.PLAY_LOSS_CARD:\n            // Fallthrough\n        case ScenarioActionKeys.ESCAPE_DAMAGE_HAND:\n            return {\n                ...state,\n                currentHandCount: state.currentHandCount - 1,\n                currentLostCount: state.currentLostCount + 1,\n            }\n        case ScenarioActionKeys.SHORT_REST:\n            // Fallthrough\n        case ScenarioActionKeys.LONG_REST:\n            return {\n                ...state,\n                currentHandCount: state.currentHandCount + Math.max(state.currentDiscardCount - 1, 0),\n                currentDiscardCount: 0,\n                currentLostCount: Math.min(state.currentLostCount + 1, state.startingHandCount),\n            }\n        case ScenarioActionKeys.ESCAPE_DAMAGE_DISCARD:\n            return {\n                ...state,\n                currentDiscardCount: state.currentDiscardCount - 2,\n                currentLostCount: state.currentLostCount + 2,\n            }\n        case ScenarioActionKeys.USE_STAMINA_POTION:\n            return {\n                ...state,\n                currentHandCount: state.currentHandCount + Math.min(2, state.currentDiscardCount),\n                currentDiscardCount: Math.max(state.currentDiscardCount - 2, 0),\n            }\n        case ScenarioActionKeys.REVIVING_ETHER:\n            return {\n                ...state,\n                currentHandCount: state.currentHandCount + state.currentLostCount,\n                currentLostCount: 0,\n                hasRevivingEther: false,\n            }\n        case ScenarioActionKeys.END_TURN:\n            return {\n                ...state,\n                currentRound: state.currentRound + 1,\n            }\n        case ScenarioActionKeys.OTHER_ACTION:\n            return state;\n        case CharacterActionKeys.CHANGE_CHARACTER:\n            const newCharacter = action.newCharacter;\n            return {\n                ...state,\n                startingHandCount: newCharacter.handSize,\n                hasRevivingEther: newCharacter.hasRevivingEther,\n                currentRound: 1,\n                currentHandCount: newCharacter.handSize,\n                currentDiscardCount: 0,\n                currentLostCount: 0,\n                completedRounds: [],\n            }\n        default:\n            return state;\n    }\n}\n\nexport default calculator;","import { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport Calculator from '../components/Calculator';\nimport { AppState } from '../redux/reducers/app';\nimport { calculateProjectedRounds } from '../redux/reducers/calculator';\n\nconst mapStateToProps = (state: AppState) => {\n    const scenarioState = state.calculator\n    return {\n        ...scenarioState,\n        projectedRounds: calculateProjectedRounds(\n            scenarioState.startingHandCount,\n            scenarioState.currentHandCount,\n            scenarioState.currentDiscardCount,\n            scenarioState.currentLostCount,\n            scenarioState.hasRevivingEther\n        ) || [],\n    }\n};\nconst matchDispatchToProps = (dispatch: Dispatch) => { }\n\nconst StatefulCalculator = connect(\n    mapStateToProps,\n    matchDispatchToProps,\n)(Calculator)\n\nexport default StatefulCalculator;","import { combineReducers } from 'redux'\nimport calculator from './calculator'\nimport character from './character'\n\nconst rootReducer = combineReducers({\n    character,\n    calculator,\n});\n\nexport type AppState = ReturnType<typeof rootReducer>\n\nexport default rootReducer","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport './App.css';\nimport Footer from './components/Footer';\nimport NavigationBarContainer from './containers/NavigationBarContainer';\nimport StatefulCalculator from './containers/StatefulCalculator';\nimport rootReducer from './redux/reducers/app';\n\nconst store = createStore(rootReducer);\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <NavigationBarContainer />\n        <main>\n          <StatefulCalculator />\n        </main>  \n      </Provider>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}